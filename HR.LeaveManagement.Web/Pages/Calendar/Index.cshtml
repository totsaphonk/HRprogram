@page
@model HR.LeaveManagement.Web.Pages.Calendar.IndexModel
@{
    ViewData["Title"] = "Team Calendar";
}

<h1>Team Calendar</h1>
<p>View team leave requests and public holidays</p>

<div class="row mb-3">
    <div class="col-md-6">
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-primary" onclick="previousMonth()">← Previous</button>
            <button type="button" class="btn btn-primary" id="currentMonth">@Model.CurrentMonth.ToString("MMMM yyyy")</button>
            <button type="button" class="btn btn-outline-primary" onclick="nextMonth()">Next →</button>
        </div>
    </div>
    <div class="col-md-6 text-end">
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-success" onclick="toggleLeaveRequests()">
                <i class="fas fa-calendar-check"></i> Leave Requests
            </button>
            <button type="button" class="btn btn-outline-warning" onclick="togglePublicHolidays()">
                <i class="fas fa-calendar-times"></i> Public Holidays
            </button>
            <button type="button" class="btn btn-outline-info" onclick="exportCalendar()">
                <i class="fas fa-download"></i> Export
            </button>
        </div>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <div class="legend">
                    <span class="badge bg-success me-2">● Approved Leave</span>
                    <span class="badge bg-warning me-2">● Pending Leave</span>
                    <span class="badge bg-danger me-2">● Rejected Leave</span>
                    <span class="badge bg-info me-2">● Public Holiday</span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="calendar-container">
    <table class="table table-bordered calendar-table">
        <thead class="table-dark">
            <tr>
                <th>Sunday</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
                <th>Saturday</th>
            </tr>
        </thead>
        <tbody id="calendarBody">
            @{
                var firstDay = new DateTime(Model.CurrentMonth.Year, Model.CurrentMonth.Month, 1);
                var lastDay = firstDay.AddMonths(1).AddDays(-1);
                var startDate = firstDay.AddDays(-(int)firstDay.DayOfWeek);
                var endDate = lastDay.AddDays(6 - (int)lastDay.DayOfWeek);
                
                for (var week = startDate; week <= endDate; week = week.AddDays(7))
                {
                    <tr>
                        @for (int i = 0; i < 7; i++)
                        {
                            var currentDate = week.AddDays(i);
                            var isCurrentMonth = currentDate.Month == Model.CurrentMonth.Month;
                            var isToday = currentDate.Date == DateTime.Today;
                            var cellClass = isCurrentMonth ? "" : "text-muted";
                            if (isToday) cellClass += " today";
                            
                            <td class="calendar-day @cellClass" data-date="@currentDate.ToString("yyyy-MM-dd")">
                                <div class="day-header">
                                    <span class="day-number">@currentDate.Day</span>
                                </div>
                                <div class="day-content">
                                    @foreach (var holiday in Model.PublicHolidays.Where(h => h.Date.Date == currentDate.Date))
                                    {
                                        <div class="event public-holiday" title="@holiday.Name">
                                            <i class="fas fa-calendar-times"></i> @holiday.Name
                                        </div>
                                    }
                                    @foreach (var leave in Model.LeaveRequests.Where(l => l.FromDate.Date <= currentDate.Date && l.ToDate.Date >= currentDate.Date))
                                    {
                                        var statusClass = leave.Status switch
                                        {
                                            "Approved" => "approved-leave",
                                            "Pending" => "pending-leave",
                                            "Rejected" => "rejected-leave",
                                            _ => "pending-leave"
                                        };
                                        <div class="event leave-request @statusClass" title="@leave.Employee.FullName - @leave.LeaveType.Name">
                                            <i class="fas fa-user"></i> @leave.Employee.FullName
                                            <br><small>@leave.LeaveType.Name</small>
                                        </div>
                                    }
                                </div>
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<style>
    .calendar-container {
        overflow-x: auto;
    }
    
    .calendar-table {
        min-width: 800px;
    }
    
    .calendar-day {
        height: 120px;
        vertical-align: top;
        position: relative;
        padding: 5px;
    }
    
    .day-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 5px;
    }
    
    .day-number {
        font-weight: bold;
        font-size: 14px;
    }
    
    .today {
        background-color: #e3f2fd;
    }
    
    .today .day-number {
        background-color: #2196f3;
        color: white;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
    }
    
    .day-content {
        max-height: 90px;
        overflow-y: auto;
    }
    
    .event {
        margin-bottom: 2px;
        padding: 2px 4px;
        border-radius: 3px;
        font-size: 11px;
        line-height: 1.2;
    }
    
    .public-holiday {
        background-color: #17a2b8;
        color: white;
    }
    
    .approved-leave {
        background-color: #28a745;
        color: white;
    }
    
    .pending-leave {
        background-color: #ffc107;
        color: black;
    }
    
    .rejected-leave {
        background-color: #dc3545;
        color: white;
    }
    
    .legend {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }
    
    .text-muted {
        opacity: 0.6;
    }
</style>

<script>
    let currentDate = new Date(@Model.CurrentMonth.Year, @Model.CurrentMonth.Month - 1, 1);
    
    function previousMonth() {
        currentDate.setMonth(currentDate.getMonth() - 1);
        window.location.href = '/Calendar?year=' + currentDate.getFullYear() + '&month=' + (currentDate.getMonth() + 1);
    }
    
    function nextMonth() {
        currentDate.setMonth(currentDate.getMonth() + 1);
        window.location.href = '/Calendar?year=' + currentDate.getFullYear() + '&month=' + (currentDate.getMonth() + 1);
    }
    
    function toggleLeaveRequests() {
        const leaveEvents = document.querySelectorAll('.leave-request');
        leaveEvents.forEach(event => {
            event.style.display = event.style.display === 'none' ? 'block' : 'none';
        });
    }
    
    function togglePublicHolidays() {
        const holidayEvents = document.querySelectorAll('.public-holiday');
        holidayEvents.forEach(event => {
            event.style.display = event.style.display === 'none' ? 'block' : 'none';
        });
    }
    
    function exportCalendar() {
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth() + 1;
        window.open('/Calendar/Export?year=' + year + '&month=' + month, '_blank');
    }
</script>
